apply plugin: 'com.android.application'

android {
	namespace = 'ac.robinson.mediaphone'
	testNamespace = namespace + '.test'
	compileSdk = 35

	def getVersionCode = { -> return 63 }

	defaultConfig {
		manifestPlaceholders.providerId = 'mediaphone'
		applicationId 'ac.robinson.' + manifestPlaceholders.providerId
		buildConfigField 'String', 'PROVIDER_ID', '"' + manifestPlaceholders.providerId + '"'

		testInstrumentationRunner 'androidx.test.runner.AndroidJUnitRunner'

		targetSdkVersion 35
		minSdkVersion 14
		versionCode getVersionCode()
		versionName '1.8.0'
		// versionNameSuffix = '-beta-1'
		resourceConfigurations += ['en', 'es', 'fr', 'nl', 'pt', 'pl', 'ru']
	}

	compileOptions {
		sourceCompatibility JavaVersion.VERSION_21
	}

	buildTypes {
		configureEach {
			if (System.getenv('SOURCE_DATE_EPOCH') == null) {
				buildConfigField 'java.util.Date', 'BUILD_TIME', 'new java.util.Date()'
			} else {
				buildConfigField 'java.util.Date', 'BUILD_TIME', 'new java.util.Date(1000 * ' +
						'Long.parseLong(System.getenv("SOURCE_DATE_EPOCH")))'
			}
			buildConfigField 'java.util.concurrent.atomic.AtomicBoolean', 'IS_TESTING', 'new java.util.' +
					'concurrent.atomic.AtomicBoolean(false)'
		}

		release {
			minifyEnabled true
			proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-mediaphone.txt'

			shrinkResources = true
		}

		// used solely for automatic screenshot generation - requires selecting in build variants pane to run via Android Studio
		testBuildType = 'screenshots'
		screenshots {
			initWith debug
			matchingFallbacks = ['debug']
		}
	}
	buildFeatures {
		// https://developer.android.com/r/tools/upgrade-assistant/build-config-default
		buildConfig = true
	}

	// automatically regenerate fastlane metadata for new releases
	tasks.register('generateMetadata', Exec) {
		doFirst {
			workingDir '../fastlane/'
			commandLine 'python3', 'xmltofastlane.py'
			args '--versionCode', getVersionCode()
		}
	}

	tasks.configureEach { task ->
		if (task.name == 'assembleRelease') {
			task.finalizedBy generateMetadata
		}
	}
}

dependencies {
	implementation project(':MediaUtilities')

	implementation 'androidx.multidex:multidex:2.0.1' // we have more than 64K methods

	//noinspection GradleDependency - upgrading to 1.12.0 and beyond requires API 19; we want to keep a lower minimum
	implementation 'com.google.android.material:material:1.11.0' // for overall UI appearance
	//noinspection GradleDependency - upgrading to 1.4.0 and beyond requires API 21; we want to keep a lower minimum
	implementation 'androidx.exifinterface:exifinterface:1.3.7'
	// for auto-selection of export resolution
	//noinspection GradleDependency - upgrading to 1.13.0 and beyond requires API 19; we want to keep a lower minimum
	implementation 'androidx.core:core:1.12.0' // for FileProvider
	//noinspection GradleDependency - upgrading to 1.1.0 and beyond requires API 21; we want to keep a lower minimum
	implementation 'androidx.documentfile:documentfile:1.0.1' // for Storage Access Framework

	androidTestImplementation 'androidx.test.espresso:espresso-core:3.6.1'
	androidTestImplementation 'androidx.test.ext:junit:1.2.1'
	androidTestImplementation 'androidx.test.uiautomator:uiautomator:2.3.0'
}

java {
	toolchain {
		languageVersion = JavaLanguageVersion.of(21)
	}
}
